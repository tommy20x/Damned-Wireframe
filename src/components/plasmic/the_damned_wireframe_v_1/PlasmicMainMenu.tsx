// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4Z3UMkZpk9iU1tNC7ianWh
// Component: 5OPwbvd_XQK
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: 9U02DESJlfv/component

import { useScreenVariants as useScreenVariantssKPzWh1XRaeiy } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: sKPzWh1XRaeiy/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_the_damned_wireframe_v_1.module.css"; // plasmic-import: 4Z3UMkZpk9iU1tNC7ianWh/projectcss
import sty from "./PlasmicMainMenu.module.css"; // plasmic-import: 5OPwbvd_XQK/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: 9vaXCj4SKKO/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: gfMcd0a2-6W/icon

export type PlasmicMainMenu__VariantMembers = {};

export type PlasmicMainMenu__VariantsArgs = {};
type VariantPropType = keyof PlasmicMainMenu__VariantsArgs;
export const PlasmicMainMenu__VariantProps = new Array<VariantPropType>();

export type PlasmicMainMenu__ArgsType = {};
type ArgPropType = keyof PlasmicMainMenu__ArgsType;
export const PlasmicMainMenu__ArgProps = new Array<ArgPropType>();

export type PlasmicMainMenu__OverridesType = {
  root?: p.Flex<"div">;
  logoButton?: p.Flex<typeof Button>;
  loreButton?: p.Flex<typeof Button>;
  roadmapButton?: p.Flex<typeof Button>;
  contestsButton?: p.Flex<typeof Button>;
  eventsButton?: p.Flex<typeof Button>;
  limboButton?: p.Flex<"div">;
  qty?: p.Flex<"div">;
  lustButton?: p.Flex<"div">;
  qty2?: p.Flex<"div">;
  gluttonyButton?: p.Flex<"div">;
  qty3?: p.Flex<"div">;
  greedButton?: p.Flex<"div">;
  qty4?: p.Flex<"div">;
  angerButton?: p.Flex<"div">;
  qty5?: p.Flex<"div">;
  heresyButton?: p.Flex<"div">;
  qty6?: p.Flex<"div">;
  violenceButton?: p.Flex<"div">;
  qty7?: p.Flex<"div">;
  fraudButton?: p.Flex<"div">;
  qty8?: p.Flex<"div">;
  voidButton?: p.Flex<typeof Button>;
  throneButton?: p.Flex<typeof Button>;
  faqButton?: p.Flex<typeof Button>;
  teamButton?: p.Flex<typeof Button>;
  contactButton?: p.Flex<typeof Button>;
};

export interface DefaultMainMenuProps {
  className?: string;
}

export const defaultMainMenu__Args: Partial<PlasmicMainMenu__ArgsType> = {};

function PlasmicMainMenu__RenderFunc(props: {
  variants: PlasmicMainMenu__VariantsArgs;
  args: PlasmicMainMenu__ArgsType;
  overrides: PlasmicMainMenu__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultMainMenu__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssKPzWh1XRaeiy()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      <Button
        data-plasmic-name={"logoButton"}
        data-plasmic-override={overrides.logoButton}
        className={classNames("__wab_instance", sty.logoButton)}
        size={"compact" as const}
      >
        {"Logo"}
      </Button>

      <Button
        data-plasmic-name={"loreButton"}
        data-plasmic-override={overrides.loreButton}
        className={classNames("__wab_instance", sty.loreButton)}
        size={
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? ("compact" as const)
            : hasVariant(globalVariants, "screen", "smallScreen")
            ? ("minimal" as const)
            : ("compact" as const)
        }
      >
        {"Lore"}
      </Button>

      <Button
        data-plasmic-name={"roadmapButton"}
        data-plasmic-override={overrides.roadmapButton}
        className={classNames("__wab_instance", sty.roadmapButton)}
        size={
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? ("compact" as const)
            : hasVariant(globalVariants, "screen", "smallScreen")
            ? ("minimal" as const)
            : ("compact" as const)
        }
      >
        {"Roadmap"}
      </Button>

      <Button
        data-plasmic-name={"contestsButton"}
        data-plasmic-override={overrides.contestsButton}
        className={classNames("__wab_instance", sty.contestsButton)}
        size={
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? ("compact" as const)
            : hasVariant(globalVariants, "screen", "smallScreen")
            ? ("minimal" as const)
            : ("compact" as const)
        }
      >
        {"Contests"}
      </Button>

      <Button
        data-plasmic-name={"eventsButton"}
        data-plasmic-override={overrides.eventsButton}
        className={classNames("__wab_instance", sty.eventsButton)}
        size={
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? ("compact" as const)
            : hasVariant(globalVariants, "screen", "smallScreen")
            ? ("minimal" as const)
            : ("compact" as const)
        }
      >
        {"IRL Events"}
      </Button>

      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
        <div
          data-plasmic-name={"limboButton"}
          data-plasmic-override={overrides.limboButton}
          className={classNames(projectcss.all, sty.limboButton)}
        >
          <Button
            className={classNames("__wab_instance", sty.button___0Ss0)}
            size={
              hasVariant(globalVariants, "screen", "smallScreen")
                ? ("minimal" as const)
                : ("compact" as const)
            }
          >
            {hasVariant(globalVariants, "screen", "smallScreen")
              ? "Limbo"
              : "Limbo"}
          </Button>

          <div
            data-plasmic-name={"qty"}
            data-plasmic-override={overrides.qty}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.qty
            )}
          >
            {"x3"}
          </div>
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
        <div
          data-plasmic-name={"lustButton"}
          data-plasmic-override={overrides.lustButton}
          className={classNames(projectcss.all, sty.lustButton)}
        >
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <Button
              className={classNames("__wab_instance", sty.button__fLm81)}
              size={
                hasVariant(globalVariants, "screen", "smallScreen")
                  ? ("minimal" as const)
                  : ("compact" as const)
              }
            >
              {"Lust"}
            </Button>
          ) : null}

          <div
            data-plasmic-name={"qty2"}
            data-plasmic-override={overrides.qty2}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.qty2
            )}
          >
            {"x0"}
          </div>
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
        <div
          data-plasmic-name={"gluttonyButton"}
          data-plasmic-override={overrides.gluttonyButton}
          className={classNames(projectcss.all, sty.gluttonyButton)}
        >
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <Button
              className={classNames("__wab_instance", sty.button___4CAz4)}
              size={
                hasVariant(globalVariants, "screen", "smallScreen")
                  ? ("minimal" as const)
                  : ("compact" as const)
              }
            >
              {"Gluttony"}
            </Button>
          ) : null}

          <div
            data-plasmic-name={"qty3"}
            data-plasmic-override={overrides.qty3}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.qty3
            )}
          >
            {"x0"}
          </div>
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
        <div
          data-plasmic-name={"greedButton"}
          data-plasmic-override={overrides.greedButton}
          className={classNames(projectcss.all, sty.greedButton)}
        >
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <Button
              className={classNames("__wab_instance", sty.button___9CyUv)}
              size={
                hasVariant(globalVariants, "screen", "smallScreen")
                  ? ("minimal" as const)
                  : ("compact" as const)
              }
            >
              {"Greed"}
            </Button>
          ) : null}

          <div
            data-plasmic-name={"qty4"}
            data-plasmic-override={overrides.qty4}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.qty4
            )}
          >
            {"x0"}
          </div>
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
        <div
          data-plasmic-name={"angerButton"}
          data-plasmic-override={overrides.angerButton}
          className={classNames(projectcss.all, sty.angerButton)}
        >
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <Button
              className={classNames("__wab_instance", sty.button__tpDz)}
              size={
                hasVariant(globalVariants, "screen", "smallScreen")
                  ? ("minimal" as const)
                  : ("compact" as const)
              }
            >
              {"Anger"}
            </Button>
          ) : null}

          <div
            data-plasmic-name={"qty5"}
            data-plasmic-override={overrides.qty5}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.qty5
            )}
          >
            {"x0"}
          </div>
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
        <div
          data-plasmic-name={"heresyButton"}
          data-plasmic-override={overrides.heresyButton}
          className={classNames(projectcss.all, sty.heresyButton)}
        >
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <Button
              className={classNames("__wab_instance", sty.button__opE1K)}
              size={
                hasVariant(globalVariants, "screen", "smallScreen")
                  ? ("minimal" as const)
                  : ("compact" as const)
              }
            >
              {"Heresy"}
            </Button>
          ) : null}

          <div
            data-plasmic-name={"qty6"}
            data-plasmic-override={overrides.qty6}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.qty6
            )}
          >
            {"x0"}
          </div>
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
        <div
          data-plasmic-name={"violenceButton"}
          data-plasmic-override={overrides.violenceButton}
          className={classNames(projectcss.all, sty.violenceButton)}
        >
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <Button
              className={classNames("__wab_instance", sty.button___97ApY)}
              size={
                hasVariant(globalVariants, "screen", "smallScreen")
                  ? ("minimal" as const)
                  : ("compact" as const)
              }
            >
              {"Violence"}
            </Button>
          ) : null}

          <div
            data-plasmic-name={"qty7"}
            data-plasmic-override={overrides.qty7}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.qty7
            )}
          >
            {"x0"}
          </div>
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
        <div
          data-plasmic-name={"fraudButton"}
          data-plasmic-override={overrides.fraudButton}
          className={classNames(projectcss.all, sty.fraudButton)}
        >
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <Button
              className={classNames("__wab_instance", sty.button__xxqqn)}
              size={
                hasVariant(globalVariants, "screen", "smallScreen")
                  ? ("minimal" as const)
                  : ("compact" as const)
              }
            >
              {"Fraud"}
            </Button>
          ) : null}

          <div
            data-plasmic-name={"qty8"}
            data-plasmic-override={overrides.qty8}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.qty8
            )}
          >
            {"x0"}
          </div>
        </div>
      ) : null}

      <Button
        data-plasmic-name={"voidButton"}
        data-plasmic-override={overrides.voidButton}
        className={classNames("__wab_instance", sty.voidButton)}
        size={
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? ("compact" as const)
            : hasVariant(globalVariants, "screen", "smallScreen")
            ? ("minimal" as const)
            : ("compact" as const)
        }
      >
        {"Void"}
      </Button>

      <Button
        data-plasmic-name={"throneButton"}
        data-plasmic-override={overrides.throneButton}
        className={classNames("__wab_instance", sty.throneButton)}
        size={
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? ("compact" as const)
            : hasVariant(globalVariants, "screen", "smallScreen")
            ? ("minimal" as const)
            : ("compact" as const)
        }
      >
        {"Throne"}
      </Button>

      <Button
        data-plasmic-name={"faqButton"}
        data-plasmic-override={overrides.faqButton}
        className={classNames("__wab_instance", sty.faqButton)}
        size={
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? ("compact" as const)
            : hasVariant(globalVariants, "screen", "smallScreen")
            ? ("minimal" as const)
            : ("compact" as const)
        }
      >
        {"FAQ"}
      </Button>

      <Button
        data-plasmic-name={"teamButton"}
        data-plasmic-override={overrides.teamButton}
        className={classNames("__wab_instance", sty.teamButton)}
        size={
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? ("compact" as const)
            : hasVariant(globalVariants, "screen", "smallScreen")
            ? ("minimal" as const)
            : ("compact" as const)
        }
      >
        {"Team"}
      </Button>

      <Button
        data-plasmic-name={"contactButton"}
        data-plasmic-override={overrides.contactButton}
        className={classNames("__wab_instance", sty.contactButton)}
        size={
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? ("compact" as const)
            : hasVariant(globalVariants, "screen", "smallScreen")
            ? ("minimal" as const)
            : ("compact" as const)
        }
      >
        {"Contact"}
      </Button>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "logoButton",
    "loreButton",
    "roadmapButton",
    "contestsButton",
    "eventsButton",
    "limboButton",
    "qty",
    "lustButton",
    "qty2",
    "gluttonyButton",
    "qty3",
    "greedButton",
    "qty4",
    "angerButton",
    "qty5",
    "heresyButton",
    "qty6",
    "violenceButton",
    "qty7",
    "fraudButton",
    "qty8",
    "voidButton",
    "throneButton",
    "faqButton",
    "teamButton",
    "contactButton"
  ],
  logoButton: ["logoButton"],
  loreButton: ["loreButton"],
  roadmapButton: ["roadmapButton"],
  contestsButton: ["contestsButton"],
  eventsButton: ["eventsButton"],
  limboButton: ["limboButton", "qty"],
  qty: ["qty"],
  lustButton: ["lustButton", "qty2"],
  qty2: ["qty2"],
  gluttonyButton: ["gluttonyButton", "qty3"],
  qty3: ["qty3"],
  greedButton: ["greedButton", "qty4"],
  qty4: ["qty4"],
  angerButton: ["angerButton", "qty5"],
  qty5: ["qty5"],
  heresyButton: ["heresyButton", "qty6"],
  qty6: ["qty6"],
  violenceButton: ["violenceButton", "qty7"],
  qty7: ["qty7"],
  fraudButton: ["fraudButton", "qty8"],
  qty8: ["qty8"],
  voidButton: ["voidButton"],
  throneButton: ["throneButton"],
  faqButton: ["faqButton"],
  teamButton: ["teamButton"],
  contactButton: ["contactButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  logoButton: typeof Button;
  loreButton: typeof Button;
  roadmapButton: typeof Button;
  contestsButton: typeof Button;
  eventsButton: typeof Button;
  limboButton: "div";
  qty: "div";
  lustButton: "div";
  qty2: "div";
  gluttonyButton: "div";
  qty3: "div";
  greedButton: "div";
  qty4: "div";
  angerButton: "div";
  qty5: "div";
  heresyButton: "div";
  qty6: "div";
  violenceButton: "div";
  qty7: "div";
  fraudButton: "div";
  qty8: "div";
  voidButton: typeof Button;
  throneButton: typeof Button;
  faqButton: typeof Button;
  teamButton: typeof Button;
  contactButton: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMainMenu__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMainMenu__VariantsArgs;
    args?: PlasmicMainMenu__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMainMenu__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMainMenu__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMainMenu__ArgProps,
      internalVariantPropNames: PlasmicMainMenu__VariantProps
    });

    return PlasmicMainMenu__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMainMenu";
  } else {
    func.displayName = `PlasmicMainMenu.${nodeName}`;
  }
  return func;
}

export const PlasmicMainMenu = Object.assign(
  // Top-level PlasmicMainMenu renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logoButton: makeNodeComponent("logoButton"),
    loreButton: makeNodeComponent("loreButton"),
    roadmapButton: makeNodeComponent("roadmapButton"),
    contestsButton: makeNodeComponent("contestsButton"),
    eventsButton: makeNodeComponent("eventsButton"),
    limboButton: makeNodeComponent("limboButton"),
    qty: makeNodeComponent("qty"),
    lustButton: makeNodeComponent("lustButton"),
    qty2: makeNodeComponent("qty2"),
    gluttonyButton: makeNodeComponent("gluttonyButton"),
    qty3: makeNodeComponent("qty3"),
    greedButton: makeNodeComponent("greedButton"),
    qty4: makeNodeComponent("qty4"),
    angerButton: makeNodeComponent("angerButton"),
    qty5: makeNodeComponent("qty5"),
    heresyButton: makeNodeComponent("heresyButton"),
    qty6: makeNodeComponent("qty6"),
    violenceButton: makeNodeComponent("violenceButton"),
    qty7: makeNodeComponent("qty7"),
    fraudButton: makeNodeComponent("fraudButton"),
    qty8: makeNodeComponent("qty8"),
    voidButton: makeNodeComponent("voidButton"),
    throneButton: makeNodeComponent("throneButton"),
    faqButton: makeNodeComponent("faqButton"),
    teamButton: makeNodeComponent("teamButton"),
    contactButton: makeNodeComponent("contactButton"),

    // Metadata about props expected for PlasmicMainMenu
    internalVariantProps: PlasmicMainMenu__VariantProps,
    internalArgProps: PlasmicMainMenu__ArgProps
  }
);

export default PlasmicMainMenu;
/* prettier-ignore-end */
