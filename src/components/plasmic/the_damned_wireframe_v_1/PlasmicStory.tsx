// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4Z3UMkZpk9iU1tNC7ianWh
// Component: mYuKdlljvqg
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: 9U02DESJlfv/component

import { useScreenVariants as useScreenVariantssKPzWh1XRaeiy } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: sKPzWh1XRaeiy/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_the_damned_wireframe_v_1.module.css"; // plasmic-import: 4Z3UMkZpk9iU1tNC7ianWh/projectcss
import sty from "./PlasmicStory.module.css"; // plasmic-import: mYuKdlljvqg/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: 9vaXCj4SKKO/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: gfMcd0a2-6W/icon
import audiopng2Zz4X42Fn from "./images/audiopng2.png"; // plasmic-import: zz4X42Fn_/picture

export type PlasmicStory__VariantMembers = {};

export type PlasmicStory__VariantsArgs = {};
type VariantPropType = keyof PlasmicStory__VariantsArgs;
export const PlasmicStory__VariantProps = new Array<VariantPropType>();

export type PlasmicStory__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicStory__ArgsType;
export const PlasmicStory__ArgProps = new Array<ArgPropType>("children");

export type PlasmicStory__OverridesType = {
  root?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  title?: p.Flex<"h1">;
  storyText?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultStoryProps {
  children?: React.ReactNode;
  className?: string;
}

export const defaultStory__Args: Partial<PlasmicStory__ArgsType> = {};

function PlasmicStory__RenderFunc(props: {
  variants: PlasmicStory__VariantsArgs;
  args: PlasmicStory__ArgsType;
  overrides: PlasmicStory__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultStory__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssKPzWh1XRaeiy()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      <h1
        data-plasmic-name={"h1"}
        data-plasmic-override={overrides.h1}
        className={classNames(
          projectcss.all,
          projectcss.h1,
          projectcss.__wab_text,
          sty.h1
        )}
      >
        {"Story"}
      </h1>

      <h1
        data-plasmic-name={"title"}
        data-plasmic-override={overrides.title}
        className={classNames(
          projectcss.all,
          projectcss.h1,
          projectcss.__wab_text,
          sty.title
        )}
      >
        {"Limbo"}
      </h1>

      {true ? (
        <div
          data-plasmic-name={"storyText"}
          data-plasmic-override={overrides.storyText}
          className={classNames(projectcss.all, sty.storyText)}
        >
          {(hasVariant(globalVariants, "screen", "smallScreen") ? true : true)
            ? p.renderPlasmicSlot({
                defaultContents:
                  "Lost souls wander through the castle of LIMBO, through the cold cobble stones that built up this fortress of woe and desolation, infinite abyss.",
                value: args.children,
                className: classNames(sty.slotTargetChildren)
              })
            : null}
        </div>
      ) : null}

      <div className={classNames(projectcss.all, sty.freeBox__ksodm)}>
        <p.PlasmicImg
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"auto" as const}
          displayMaxHeight={"none" as const}
          displayMaxWidth={"100%" as const}
          displayMinHeight={"0" as const}
          displayMinWidth={"0" as const}
          displayWidth={"auto" as const}
          loading={"lazy" as const}
          src={{
            src: audiopng2Zz4X42Fn,
            fullWidth: 534,
            fullHeight: 108,
            aspectRatio: undefined
          }}
        />

        <div className={classNames(projectcss.all, sty.freeBox__esoJs)}>
          <Button
            className={classNames("__wab_instance", sty.button__q6Ovn)}
            isDisabled={true}
          >
            {"Story"}
          </Button>

          <div className={classNames(projectcss.all, sty.freeBox__gBqqw)} />

          <Button className={classNames("__wab_instance", sty.button__kNmEa)}>
            {"Poem"}
          </Button>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h1", "title", "storyText", "img"],
  h1: ["h1"],
  title: ["title"],
  storyText: ["storyText"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  h1: "h1";
  title: "h1";
  storyText: "div";
  img: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStory__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStory__VariantsArgs;
    args?: PlasmicStory__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStory__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicStory__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicStory__ArgProps,
      internalVariantPropNames: PlasmicStory__VariantProps
    });

    return PlasmicStory__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStory";
  } else {
    func.displayName = `PlasmicStory.${nodeName}`;
  }
  return func;
}

export const PlasmicStory = Object.assign(
  // Top-level PlasmicStory renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    title: makeNodeComponent("title"),
    storyText: makeNodeComponent("storyText"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicStory
    internalVariantProps: PlasmicStory__VariantProps,
    internalArgProps: PlasmicStory__ArgProps
  }
);

export default PlasmicStory;
/* prettier-ignore-end */
